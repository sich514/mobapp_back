from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import datetime
import base64
from PIL import Image
import io
from openai import OpenAI
import os

# üîê –¢–≤–æ–π API-–∫–ª—é—á
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
print('Yes')

app = FastAPI()

# ‚úÖ CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ FlutterFlow
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def convert_to_jpeg(image_bytes: bytes) -> bytes:
    """–ü—Ä–∏–≤–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ JPEG –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å OpenAI"""
    try:
        image = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        buffer = io.BytesIO()
        image.save(buffer, format="JPEG")
        return buffer.getvalue()
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

def encode_image_for_openai(image_bytes: bytes) -> str:
    """–°–æ–∑–¥–∞—ë–º base64 URL-—Å—Ç—Ä–æ–∫—É"""
    return f"data:image/jpeg;base64,{base64.b64encode(image_bytes).decode('utf-8')}"

@app.post("/analyze-meal")
async def analyze_meal(file: UploadFile = File(...)):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename} (MIME: {file.content_type})")

    try:
        original_bytes = await file.read()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—ë –∫ JPEG
        jpeg_bytes = convert_to_jpeg(original_bytes)

        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        image_url = encode_image_for_openai(jpeg_bytes)

        # üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI (model gpt-4.1)
        response = client.responses.create(
            model="gpt-4.1",
            input=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": (
                                "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –µ–¥–∞ ‚Äî –ø–æ—Å—á–∏—Ç–∞–π –µ—ë —Å—É–º–º–∞—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å. "
                                "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 520"
                            )
                        },
                        {
                            "type": "input_image",
                            "image_url": image_url,
                        }
                    ]
                }
            ]
        )

        raw_text = response.output_text.strip()
        print(f"üéØ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {raw_text}")

        return {
            "name": "Meal",
            "calories": f"{raw_text} kcal",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é",
            "timestamp": datetime.datetime.utcnow().isoformat()
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": str(e)}
        )
