from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
import datetime

# üß† –§—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–≤–æ–µ–≥–æ –º–æ–¥—É–ª—è
from openai_api import query_openai_image, parse_response_to_structured_format

app = FastAPI()

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS ‚Äî —á—Ç–æ–±—ã FlutterFlow –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ –¥–æ–º–µ–Ω–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/analyze-meal")
async def analyze_meal(file: UploadFile = File(...)):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}")

    # üì∏ –°—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_bytes = await file.read()

    # üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –∏ –ø–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
    response_text = query_openai_image(image_bytes)

    # üßπ –ü–∞—Ä—Å–∏–º –µ–≥–æ –≤ —Ç–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: name, calories, description
    structured = parse_response_to_structured_format(response_text)

    # üïí –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
    structured["timestamp"] = datetime.datetime.utcnow().isoformat()

    return structured
