from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from typing import Dict
import datetime
import openai
import base64
import re

app = FastAPI()

# ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚ö†Ô∏è –¢–≤–æ–π OpenAI –∫–ª—é—á
openai.api_key = "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"


@app.post("/analyze-meal")
async def analyze_meal(file: UploadFile = File(...)):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}")

    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    image_bytes = await file.read()
    image_base64 = base64.b64encode(image_bytes).decode("utf-8")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ GPT-4-Vision
    response = openai.chat.completions.create(
        model="gpt-4-vision-preview",
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{image_base64}"
                        }
                    },
                    {
                        "type": "text",
                        "text": "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ? –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–ª–æ—Ä–∏–π –≤ —ç—Ç–æ–º –±–ª—é–¥–µ? –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —á–∏—Å–ª–æ–º."
                    }
                ]
            }
        ],
        max_tokens=300,
    )

    result_text = response.choices[0].message.content
    print("üì§ –û—Ç–≤–µ—Ç –æ—Ç GPT:", result_text)

    # üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ —á–∏—Å–ª–æ–º (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "–∫–∫–∞–ª" –∏–ª–∏ "kcal")
    calorie_match = re.search(r"(\d{2,4})\s?(?:–∫–∫–∞–ª|kcal)", result_text.lower())
    calories = int(calorie_match.group(1)) if calorie_match else 0

    return {
        "name": "Meal",  # –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ —Ç–æ–∂–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
        "calories": calories,
        "description": result_text,
        "timestamp": datetime.datetime.utcnow().isoformat()
    }
